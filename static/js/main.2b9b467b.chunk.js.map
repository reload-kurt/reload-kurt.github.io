{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","token","setToken","refreshing","setRefreshing","startDate","setStartDate","endDate","setEndDate","round","cans","unique","surveys","total","stats","refresh","a","alert","newStat","dateQuery","allDateQuery","fetch","catch","e","roundSurvey","totalSurvey","roundEntries","totalEntries","ok","json","roundSurveyJSON","totalSurveyJSON","roundEntriesJSON","totalEntriesJSON","data","length","_customerIds","map","customer","Array","from","Set","className","Container","Row","Col","InputGroup","Prepend","Text","id","FormControl","aria-describedby","onChange","target","value","type","Button","block","variant","onClick","Table","striped","bordered","hover","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.2b9b467b.chunk.js","sourcesContent":["import React, { useState } from 'react'; \nimport './App.css';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n\tContainer, \n\tRow, \n\tCol,\n\tInputGroup,\n\tFormControl,\n\tButton,\n\tTable,\n\tAlert\n} from 'react-bootstrap';\n\nfunction App() {\n\n\tconst [token, setToken] = useState(null);\n\tconst [refreshing, setRefreshing] = useState(false);\n\tconst [startDate, setStartDate] = useState(null);\n\tconst [endDate, setEndDate] = useState(null);\n\n\tconst [stats, setStats] = useState({\n\t\tround: {\n\t\t\tcans: 0,\n\t\t\tunique:0,\n\t\t\tsurveys: 0\n\t\t},\n\t\ttotal: {\n\t\t\tcans: 0,\n\t\t\tunique: 0,\n\t\t\tsurveys: 0\n\t\t}\n\t});\n\n\tconst refresh = async () => {\n\t\tif(token == null) {\n\t\t\talert(\"Don't forget the token!\");\n\t\t\treturn;\n\t\t}\n\t\tif(startDate == null || endDate == null) {\n\t\t\talert(\"Please select start and end date of round first\");\n\t\t\treturn;\n\t\t}\n\n\t\tsetRefreshing(true);\n\n\t\tlet newStat = stats;\n\n\t\tlet dateQuery = startDate + \" 00:01:00,\" + endDate + \" 23:59:00\";\n\t\tlet allDateQuery = \"2020-06-13 00:01:00,\" + endDate + \" 23:59:00\";\n\n\t\t// Get this rounds surveys\n\t\tlet roundSurvey = await fetch('https://compo-api.huskypet.co.za/husky-microsite/items/survey?access_token=' + token + '&filter[created_on][between]=' + dateQuery + '&limit=-1')\n\t\t\t\t\t\t\t\t.catch(e => alert(\"Unable to communicate with API\"));\n\t\t// Get total survey\n\t\tlet totalSurvey = await fetch('https://compo-api.huskypet.co.za/husky-microsite/items/survey?access_token=' + token + '&filter[created_on][between]=' + allDateQuery + '&limit=-1')\n\t\t\t\t\t\t\t\t.catch(e => alert(\"Unable to communicate with API\"));\n\n\n\t\t// get round entries\n\t\tlet roundEntries = await fetch('https://compo-api.huskypet.co.za/husky-microsite/items/entries?access_token=' + token + '&filter[created_on][between]=' + dateQuery + '&limit=-1')\n\t\t\t\t\t\t\t\t.catch(e => alert(\"Unable to communicate with API\"));\n\t\t// get total entries\n\t\tlet totalEntries = await fetch('https://compo-api.huskypet.co.za/husky-microsite/items/entries?access_token=' + token + '&filter[created_on][between]=' + allDateQuery + '&limit=-1')\n\t\t\t\t\t\t\t\t.catch(e => alert(\"Unable to communicate with API\"));\n\n\t\tif (roundSurvey && roundSurvey.ok &&\n\t\t\ttotalSurvey && totalSurvey.ok &&\n\t\t\troundEntries && roundEntries.ok &&\n\t\t\ttotalEntries && totalEntries.ok) {\n\t\t\tlet roundSurveyJSON = await roundSurvey.json(); \n\t\t\tlet totalSurveyJSON = await totalSurvey.json();\n\t\t\n\t\t\tlet roundEntriesJSON = await roundEntries.json();\n\t\t\tlet totalEntriesJSON = await totalEntries.json();\n\n\t\t\t// Survey results\n\t\t\tnewStat.round.surveys = roundSurveyJSON.data.length;\n\t\t\tnewStat.total.surveys = totalSurveyJSON.data.length;\n\n\t\t\t// Cans\n\t\t\tnewStat.round.cans = roundEntriesJSON.data.length;\n\t\t\tnewStat.total.cans = totalEntriesJSON.data.length; \n\t\t\t\n\t\t\t// Entries\n\t\t\tlet _customerIds = roundEntriesJSON.data.map(e => {\n\t\t\t\treturn e.customer;\n\t\t\t}); \n\t\t\tnewStat.round.unique = Array.from(new Set(_customerIds)).length; // isolate unique\n\t\t\t_customerIds = totalEntriesJSON.data.map(e => {\n\t\t\t\treturn e.customer;\n\t\t\t});\n\t\t\tnewStat.total.unique = Array.from(new Set(_customerIds)).length; // isolate unique\n\t\t}\n\t\t \n\n\t\tsetRefreshing(false);\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Container>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col> \n\t\t\t\t\t\t<InputGroup className=\"mb-3\">\n\t\t\t\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t\t\t\t<InputGroup.Text id=\"basic-addon3\">\n\t\t\t\t\t\t\t\t\tSecurity token (ask Kurt):\n\t\t\t\t\t\t\t\t</InputGroup.Text>\n\t\t\t\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t\t\t\t<FormControl id=\"basic-url\" aria-describedby=\"basic-addon3\" onChange={(e) => setToken(e.target.value)} />\n\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tSelect the first day this round starts and the last day of the round.<br/>\n\t\t\t\t\t\t\t<small>(System will automatically select 00:01 and 23:59 from first/last)</small>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<InputGroup className=\"mb-3\">\n\t\t\t\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t\t\t\t<InputGroup.Text>First Day</InputGroup.Text>\n  \t\t\t\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t\t\t\t<FormControl onChange={(e) => setStartDate(e.target.value)} type=\"date\" />\n\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<InputGroup className=\"mb-3\">\n\t\t\t\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t\t\t\t<InputGroup.Text>Last Day</InputGroup.Text>\n  \t\t\t\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t\t\t\t<FormControl onChange={(e) => setEndDate(e.target.value)} type=\"date\" />\n\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<Button block variant=\"primary\" onClick={() => refresh() }>Refresh</Button>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col><hr/></Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t{refreshing ? (\n\t\t\t\t\t\t\t<p>Loading...</p>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<p>Selected Round</p>\n\t\t\t\t\t\t\t\t<Table striped bordered hover>\n\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<th>Total Entries (Cans)</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>Round Unique Entries</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>Total Survey Results</th> \n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ stats.round.cans }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ stats.round.unique }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ stats.round.surveys }</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<p>Since Start Until Round Close</p>\n\t\t\t\t\t\t\t\t<Table striped bordered hover>\n\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<th>Total Entries (Cans)</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>Unique Entries</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>Total Survey Results</th>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ stats.total.cans }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ stats.total.unique }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ stats.total.surveys }</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}