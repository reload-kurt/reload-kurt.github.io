{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","token","setToken","refreshing","setRefreshing","startDate","setStartDate","endDate","setEndDate","winners","setWinners","winnerCount","setWinnerCount","round","cans","unique","surveys","total","stats","selectWinners","a","alert","dateQuery","fetch","catch","e","_entries","json","_entriesJSON","consumerList","data","map","customer","join","_consumers","_consumersJSON","fileList","receipt","_receipts","_receiptsJSON","console","log","_combined","k","length","i","id","p","push","full_url","refresh","newStat","allDateQuery","roundSurvey","totalSurvey","roundEntries","totalEntries","ok","roundSurveyJSON","totalSurveyJSON","roundEntriesJSON","totalEntriesJSON","_customerIds","Array","from","Set","className","Container","Row","Col","InputGroup","Prepend","Text","FormControl","aria-describedby","onChange","target","value","type","Button","block","variant","onClick","Table","striped","bordered","hover","style","winner","key","consumer","name_surname","email","mobile","entry","created_on","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.415f4ba2.chunk.js","sourcesContent":["import React, { useState } from 'react'; \nimport './App.css';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n\tContainer, \n\tRow, \n\tCol,\n\tInputGroup,\n\tFormControl,\n\tButton,\n\tTable,\n\tAlert\n} from 'react-bootstrap';\n\nfunction App() {\n\n\tconst [token, setToken] = useState(\"UWck9jbLklsr2mNzJY2UeNA7\");\n\tconst [refreshing, setRefreshing] = useState(false);\n\tconst [startDate, setStartDate] = useState(null);\n\tconst [endDate, setEndDate] = useState(null);\n\tconst [winners, setWinners] = useState(null);\n\tconst [winnerCount, setWinnerCount] = useState(20);\n\tconst [stats, setStats] = useState({\n\t\tround: {\n\t\t\tcans: 0,\n\t\t\tunique:0,\n\t\t\tsurveys: 0\n\t\t},\n\t\ttotal: {\n\t\t\tcans: 0,\n\t\t\tunique: 0,\n\t\t\tsurveys: 0\n\t\t}\n\t});\n\n\tconst selectWinners = async () => {\n\n\t\tif(token == null) {\n\t\t\talert(\"Don't forget the token!\");\n\t\t\treturn;\n\t\t}\n\t\tif(startDate == null || endDate == null) {\n\t\t\talert(\"Please select start and end date of round first\");\n\t\t\treturn;\n\t\t}\n\n\t\tsetRefreshing(true);\n\n\t\tlet dateQuery = startDate + \" 00:01:00,\" + endDate + \" 23:59:00\";\n\t\tlet _entries = await fetch('https://compo-api.huskypet.co.za/husky-microsite/items/entries?access_token=' + token + '&sort=?&filter[created_on][between]=' + dateQuery + '&limit=' + winnerCount)\n\t\t\t\t\t\t\t\t.catch(e => alert(\"Unable to communicate with API\"));\n\t\t\n\t\tlet _entriesJSON = await _entries.json();\n\t\t\n\t\tif(_entriesJSON) { \n\t\t\tlet consumerList = _entriesJSON.data.map(e => e.customer).join(','); \n\n\t\t\t// fetch consumers\n\t\t \tlet _consumers = await fetch('https://compo-api.huskypet.co.za/husky-microsite/items/consumers?access_token=' + token + '&filter[id][in]=' + consumerList + '&limit=' + winnerCount)\n\t\t \t\t\t\t\t\t   .catch(e => alert(\"Unable to communicate with API\"));\n\t\t\tlet _consumersJSON = await _consumers.json(); \n\t\t\t \n\t\t\t// fetch files\n\t\t\tlet fileList = _entriesJSON.data.map(e => e.receipt).join(','); \n\t\t\tlet _receipts = await fetch('https://compo-api.huskypet.co.za/husky-microsite/files?access_token=' + token + '&filter[id][in]=' + fileList)\n\t\t\t\t\t\t\t\t  .catch(e => alert(\"Unable to communicate with API\"));\n\t\t\tlet _receiptsJSON = await _receipts.json(); \n\t\t\tconsole.log(\"Files:\", _receiptsJSON);\n\n\t\t\tlet _combined = [];\n\t\t\t\n\t\t\tfor(let k = 0; k < _consumersJSON.data.length; k++) {\n\t\t\t\tfor(let i = 0; i < _entriesJSON.data.length; i++) {\n\t\t\t\t\tif (_consumersJSON.data[k].id === _entriesJSON.data[i].customer) {\n\t\t\t\t\t\tfor(let p = 0; p < _receiptsJSON.data.length; p++) {\n\t\t\t\t\t\t\tif (_receiptsJSON.data[p].id === _entriesJSON.data[i].receipt) {\n\t\t\t\t\t\t\t\t_combined.push({\n\t\t\t\t\t\t\t\t\t'consumer': _consumersJSON.data[k],\n\t\t\t\t\t\t\t\t\t'entry': _entriesJSON.data[i],\n\t\t\t\t\t\t\t\t\t'receipt': _receiptsJSON.data[p].data.full_url\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(_combined);\n\n\t\t \tsetWinners(_combined);\n\t\t} else {\n\t\t\tsetWinners(null);\n\t\t}\n\t\t\n\t\tsetRefreshing(false);\n\t};\n\n\tconst refresh = async () => {\n\t\tif(token == null) {\n\t\t\talert(\"Don't forget the token!\");\n\t\t\treturn;\n\t\t}\n\t\tif(startDate == null || endDate == null) {\n\t\t\talert(\"Please select start and end date of round first\");\n\t\t\treturn;\n\t\t}\n\n\t\tsetRefreshing(true);\n\n\t\tlet newStat = stats;\n\n\t\tlet dateQuery = startDate + \" 00:01:00,\" + endDate + \" 23:59:00\";\n\t\tlet allDateQuery = \"2020-06-13 00:01:00,\" + endDate + \" 23:59:00\";\n\n\t\t// Get this rounds surveys\n\t\tlet roundSurvey = await fetch('https://compo-api.huskypet.co.za/husky-microsite/items/survey?access_token=' + token + '&filter[created_on][between]=' + dateQuery + '&limit=-1')\n\t\t\t\t\t\t\t\t.catch(e => alert(\"Unable to communicate with API\"));\n\t\t// Get total survey\n\t\tlet totalSurvey = await fetch('https://compo-api.huskypet.co.za/husky-microsite/items/survey?access_token=' + token + '&filter[created_on][between]=' + allDateQuery + '&limit=-1')\n\t\t\t\t\t\t\t\t.catch(e => alert(\"Unable to communicate with API\"));\n\n\n\t\t// get round entries\n\t\tlet roundEntries = await fetch('https://compo-api.huskypet.co.za/husky-microsite/items/entries?access_token=' + token + '&filter[created_on][between]=' + dateQuery + '&limit=-1')\n\t\t\t\t\t\t\t\t.catch(e => alert(\"Unable to communicate with API\"));\n\t\t// get total entries\n\t\tlet totalEntries = await fetch('https://compo-api.huskypet.co.za/husky-microsite/items/entries?access_token=' + token + '&filter[created_on][between]=' + allDateQuery + '&limit=-1')\n\t\t\t\t\t\t\t\t.catch(e => alert(\"Unable to communicate with API\"));\n\n\t\tif (roundSurvey && roundSurvey.ok &&\n\t\t\ttotalSurvey && totalSurvey.ok &&\n\t\t\troundEntries && roundEntries.ok &&\n\t\t\ttotalEntries && totalEntries.ok) {\n\t\t\tlet roundSurveyJSON = await roundSurvey.json(); \n\t\t\tlet totalSurveyJSON = await totalSurvey.json();\n\t\t\n\t\t\tlet roundEntriesJSON = await roundEntries.json();\n\t\t\tlet totalEntriesJSON = await totalEntries.json();\n\n\t\t\t// Survey results\n\t\t\tnewStat.round.surveys = roundSurveyJSON.data.length;\n\t\t\tnewStat.total.surveys = totalSurveyJSON.data.length;\n\n\t\t\t// Cans\n\t\t\tnewStat.round.cans = roundEntriesJSON.data.length;\n\t\t\tnewStat.total.cans = totalEntriesJSON.data.length; \n\t\t\t\n\t\t\t// Entries\n\t\t\tlet _customerIds = roundEntriesJSON.data.map(e => {\n\t\t\t\treturn e.customer;\n\t\t\t}); \n\t\t\tnewStat.round.unique = Array.from(new Set(_customerIds)).length; // isolate unique\n\t\t\t_customerIds = totalEntriesJSON.data.map(e => {\n\t\t\t\treturn e.customer;\n\t\t\t});\n\t\t\tnewStat.total.unique = Array.from(new Set(_customerIds)).length; // isolate unique\n\t\t} \n\n\t\tsetRefreshing(false);\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Container>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col> \n\t\t\t\t\t\t<InputGroup className=\"mb-3\">\n\t\t\t\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t\t\t\t<InputGroup.Text id=\"basic-addon3\">\n\t\t\t\t\t\t\t\t\tSecurity token (ask Kurt):\n\t\t\t\t\t\t\t\t</InputGroup.Text>\n\t\t\t\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t\t\t\t<FormControl id=\"basic-url\" aria-describedby=\"basic-addon3\" onChange={(e) => setToken(e.target.value)} />\n\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tSelect the first day this round starts and the last day of the round.<br/>\n\t\t\t\t\t\t\t<small>(System will automatically select 00:01 and 23:59 from first/last)</small>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<InputGroup className=\"mb-3\">\n\t\t\t\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t\t\t\t<InputGroup.Text>First Day</InputGroup.Text>\n  \t\t\t\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t\t\t\t<FormControl onChange={(e) => setStartDate(e.target.value)} type=\"date\" />\n\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<InputGroup className=\"mb-3\">\n\t\t\t\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t\t\t\t<InputGroup.Text>Last Day</InputGroup.Text>\n  \t\t\t\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t\t\t\t<FormControl onChange={(e) => setEndDate(e.target.value)} type=\"date\" />\n\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<Button block variant=\"primary\" onClick={() => refresh() }>Refresh</Button>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col><hr/></Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t{refreshing ? (\n\t\t\t\t\t\t\t<p>Loading...</p>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<p>Selected Round</p>\n\t\t\t\t\t\t\t\t<Table striped bordered hover>\n\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<th>Total Entries (Cans)</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>Round Unique Entries</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>Total Survey Results</th> \n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ stats.round.cans }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ stats.round.unique }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ stats.round.surveys }</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<p>Since Start Until Round Close</p>\n\t\t\t\t\t\t\t\t<Table striped bordered hover>\n\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<th>Total Entries (Cans)</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>Unique Entries</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>Total Survey Results</th>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ stats.total.cans }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ stats.total.unique }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ stats.total.surveys }</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t\t<hr/>\n\t\t\t<Container>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<p>The winners below are randomly selected from the week selected above.</p>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<InputGroup className=\"mb-3\">\n\t\t\t\t\t\t\t<InputGroup.Prepend>\n\t\t\t\t\t\t\t\t<InputGroup.Text>No. Winners</InputGroup.Text>\n  \t\t\t\t\t\t\t</InputGroup.Prepend>\n\t\t\t\t\t\t\t<FormControl value={winnerCount} onChange={(e) => setWinnerCount(e.target.value)} type=\"number\" />\n\t\t\t\t\t\t</InputGroup>\n\n\t\t\t\t\t\t<Button onClick={() => selectWinners()}>Select Winners</Button>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<p>&nbsp;</p>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t{refreshing ? (\n\t\t\t\t\t\t\t<p>Loading...</p>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Table style={{'textAlign' : 'left'}}>\n\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<th>Name</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>Email</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>Cell</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>Entry date</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>Receipt</th>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t{winners && winners.map((winner, i) => ( \n\t\t\t\t\t\t\t\t\t\t<tr key={i}> \n\t\t\t\t\t\t\t\t\t\t\t<td>{ winner.consumer.name_surname }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ winner.consumer.email }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ winner.consumer.mobile }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{ winner.entry.created_on }</td>\n\t\t\t\t\t\t\t\t\t\t\t<td><a href={ winner.receipt } target=\"_blank\">View</a></td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}